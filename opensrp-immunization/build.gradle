description = 'OpenSRP immunization client library'

buildscript {
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:$androidToolsBuildGradle"
        classpath 'org.apache.commons:commons-lang3:3.12.0'
    }
}

apply plugin: 'com.android.library'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'

jacoco {
    toolVersion = "0.8.8"
}

allprojects {
    repositories {
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
        maven { url "https://s3.amazonaws.com/repo.commonsware.com" }
        maven { url 'https://dl.bintray.com/ibm-watson-health/ibm-fhir-server-releases' }
        mavenLocal()
    }
}

android {
    compileSdkVersion androidCompileSdkVersion
    buildToolsVersion androidBuildToolsVersion

    defaultPublishConfig !isReleaseBuild() ? "debug" : "release"

    defaultConfig {
        minSdkVersion androidMinSdkVersion
        targetSdkVersion androidTargetSdkVersion
        versionCode Integer.parseInt(project.VERSION_CODE)
        versionName project.VERSION_NAME
        multiDexEnabled true
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        javaCompileOptions.annotationProcessorOptions.includeCompileClasspath = true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "int", "VACCINE_SYNC_TIME", '12'
        }

        debug {
            buildConfigField "int", "VACCINE_SYNC_TIME", '12'
            testCoverageEnabled true
        }
    }


    lintOptions {
        abortOnError false
    }

    dexOptions {
        incremental true
        javaMaxHeapSize "4g"
    }

    // avoid errors with message 'Duplicate files copied in APK ...'
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.md'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.md'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE.md'
        exclude 'META-INF/NOTICE.md'
        exclude 'META-INF/ASL2.0'
        exclude 'androidsupportmultidexversion.txt'
    }

    testOptions {
        unitTests {
            returnDefaultValues = true
            includeAndroidResources = true
        }

        unitTests.all {
            jvmArgs "-Xmx3g"
        }
    }

    compileOptions {
        // Flag to enable support for the new language APIs
        coreLibraryDesugaringEnabled true

        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}
configurations {
    androidTestImplementation {
        exclude group: 'com.google.firebase', module: 'firebase-perf'
        exclude group: 'com.google.firebase', module: 'firebase-crashlytics'
    }
}

dependencies {

    implementation 'androidx.test:core:1.4.0'
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.0.9'

    implementation('org.smartregister:opensrp-client-core:6.0.0-ALPHA-SNAPSHOT@aar') {
        transitive = true
        exclude group: 'com.github.bmelnychuk', module: 'atv'
        exclude group: 'jakarta.annotation', module: 'jakarta.annotation-api'
        exclude group: 'com.ibm.fhir', module: 'fhir-model'
        exclude group: 'com.ibm.fhir', module: 'fhir-path'
    }

    implementation('org.smartregister:opensrp-client-native-form:2.1.16-SNAPSHOT@aar') {
        transitive = true
        exclude group: 'com.android.support', module: 'recyclerview-v7'
        exclude group: 'com.google.code.gson', module: 'gson'
    }

    implementation platform('com.google.firebase:firebase-bom:30.0.2')
    implementation 'com.google.firebase:firebase-crashlytics'
    implementation 'com.google.firebase:firebase-perf'

    testImplementation 'com.ibm.fhir:fhir-model:4.7.1'
    testImplementation 'com.ibm.fhir:fhir-path:4.7.1'

    testImplementation 'junit:junit:4.13.2'

    def robolectricVersion = '4.8.1'
    testImplementation("org.robolectric:robolectric:$robolectricVersion") {
        exclude group: 'com.google.auto.service', module: 'auto-service'
        exclude group: 'com.android.support'
    }
    testImplementation "org.robolectric:shadows-multidex:$robolectricVersion"

    testImplementation(group: 'org.robolectric', name: 'shadows-multidex', version: "$robolectricVersion") {
        exclude group: 'com.google.guava', module: 'guava'
    }
    testImplementation "org.robolectric:shadows-support-v4:3.4-rc2"

    androidTestImplementation('androidx.test.espresso:espresso-core:3.4.0') {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'junit', module: 'junit'
    }

    // PowerMock
    def powerMockVersion = '2.0.9'
    testImplementation "org.powermock:powermock-core:$powerMockVersion"

    //Mockito
    def mockitoVersion = '4.6.1'
    testImplementation("org.mockito:mockito-core:$mockitoVersion")
    testImplementation("org.mockito:mockito-inline:$mockitoVersion")
    testImplementation group: 'org.skyscreamer', name: 'jsonassert', version: '1.2.3'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    getReports().getXml().setDestination(file("${buildDir}/reports/jacoco/jacocoRootReport/merged.xml"))
    getReports().getHtml().setDestination(file("${buildDir}/reports/jacoco/jacocoRootReport/html"))

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'androidx/**/*.*', 'android/**/*.*', '**/*$ViewBinder*.*']
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/javac/debug/classes", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(
            fileTree(dir: project.buildDir, includes: [
                    'jacoco/testDebugUnitTest.exec',
                    'outputs/code_coverage/debugAndroidTest/connected/*coverage.ec'
            ]),
            fileTree(dir: project.projectDir, includes: ['**/*.exec', '**/*.ec'])
    )
}

coveralls {
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/merged.xml"
}

apply from: '../maven.gradle'
