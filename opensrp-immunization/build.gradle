description = 'OpenSRP immunization client library'

buildscript {
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:$androidToolsBuildGradle"
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.2'
    }
}

apply plugin: 'com.android.library'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'


jacoco {
    toolVersion = "0.8.0"
}

allprojects {
    repositories {
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
        maven { url "https://s3.amazonaws.com/repo.commonsware.com" }
        mavenLocal()
    }
}

android {
    compileSdkVersion androidCompileSdkVersion
    buildToolsVersion androidBuildToolsVersion

    defaultPublishConfig !isReleaseBuild() ? "debug" : "release"

    defaultConfig {
        minSdkVersion androidMinSdkVersion
        targetSdkVersion androidTargetSdkVersion
        versionCode Integer.parseInt(project.VERSION_CODE)
        versionName project.VERSION_NAME
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "int", "VACCINE_SYNC_TIME", '12'
        }

        debug {
            buildConfigField "int", "VACCINE_SYNC_TIME", '0'
            testCoverageEnabled true
        }
    }

    lintOptions {
        abortOnError false
    }

    dexOptions {
        javaMaxHeapSize "4g"
    }

    // avoid errors with message 'Duplicate files copied in APK ...'
    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
    }

    testOptions {
        unitTests {
            returnDefaultValues = true
            includeAndroidResources = true
        }
    }
}


//tasks.withType(Test) {
//    jacoco.includeNoLocationClasses = true
//}

dependencies {
    implementation('org.smartregister:opensrp-client-core:4.7.60-p2-invalid-brac-SNAPSHOT@aar') {
        transitive = true
        exclude group: 'com.github.bmelnychuk', module: 'atv'
    }

    implementation('org.smartregister:opensrp-client-native-form:1.7.0-SNAPSHOT@aar') {
        transitive = true
        exclude group: 'com.android.support', module: 'recyclerview-v7'
    }

    testImplementation 'junit:junit:4.12'

    testImplementation('org.robolectric:robolectric:3.8') {
        exclude group: 'com.google.guava', module: 'guava'
        exclude group: 'org.apache.maven', module: 'maven-model'
        exclude group: 'com.thoughtworks.xstream', module: 'xstream'
    }

    testImplementation('org.robolectric:shadows-multidex:3.8') {
        exclude group: 'com.google.guava', module: 'guava'
    }

    testImplementation 'org.robolectric:shadows-support-v4:3.4-rc2'

    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.+') {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'junit', module: 'junit'
    }
    // PowerMock
    def powerMockVersion = '1.7.1'
    testImplementation "org.powermock:powermock-module-junit4:$powerMockVersion"
    testImplementation "org.powermock:powermock-module-junit4-rule:$powerMockVersion"
    testImplementation "org.powermock:powermock-api-mockito2:$powerMockVersion"
    testImplementation("org.powermock:powermock-classloading-xstream:$powerMockVersion")
    testImplementation 'org.apache.maven:maven-ant-tasks:2.1.3'
    testImplementation group: 'org.skyscreamer', name: 'jsonassert', version: '1.2.3'
    testImplementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.6'
}

//task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
//
//    reports {
//        xml.enabled = true
//        html.enabled = true
//    }
//
//    getReports().getXml().setDestination(file("${buildDir}/reports/jacoco/jacocoRootReport/merged.xml"))
//    getReports().getHtml().setDestination(file("${buildDir}/reports/jacoco/jacocoRootReport/html"))
//
//    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*', '**/*$ViewBinder*.*']
//    def debugTree = fileTree(dir: "$project.buildDir/intermediates/classes/debug", excludes: fileFilter)
//    def mainSrc = "$project.projectDir/src/main/java"
//
////    sourceDirectories = files([mainSrc])
////    classDirectories = files([debugTree])
////    executionData = fileTree(dir: project.buildDir, includes: [
////            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
////    ])
//}

//coveralls {
//    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/merged.xml"
//}


apply from: '../maven.gradle'
